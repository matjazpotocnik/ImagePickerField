<?php

/**
 * Class FieldtypeImagePicker
 */
class FieldtypeImagePicker extends FieldtypeText {

    protected $sid;

    /**
     * Get information about this module
     *
     * @return array
     */
    public static function getModuleInfo() {
        return [
            'title' => 'ImagePicker',
            'version' => 91,
            'summary' => 'Field that stores an Image URL.',
            'author' => 'theo222',
            'href' => 'https://github.com/theo222/ImagePickerField',
            'icon' => 'picture-o',
            'installs' => 'InputfieldImagePicker, ImagePickerList',
        ];
    }

    public function init() {
        parent::init();
    }

    /**
     * Return new instance of the Inputfield associated with this Fieldtype
     *
     * @param Page $page
     * @param Field $field
     * @return Inputfield
     */
    public function getInputfield(Page $page, Field $field) {
        /** @var InputfieldImagePicker $inputField */
        $inputField = $this->modules->get("InputfieldImagePicker");
        $session = $this->session;

        $session->ip_filters = $field->filters;
        $session->ip_thumbwidth = $field->thumnailwidth;
        $session->ip_thumbsizer = $field->thumnailsizer;

        $inputField->setPage($page);
        $inputField->setField($field);
        $this->sid = 'ip_' . $page->id . '_' . $field->name;
        $session->set($this->sid, array('sele' => $field->filters, 'thumbw' => $field->thumnailwidth, 'thumbs' => $field->thumnailsizer));

        return $inputField;
    }

    public function ___getConfigInputfields(Field $field) {

        $inputfields = parent::___getConfigInputfields($field);
        $modules = $this->modules;

        $f = $modules->get('InputfieldText');
        $f->attr('name', 'filters');
        $f->label = $this->_('Selectors');
        $f->description = $this->_('Enter selectors to restrict page selection.');
        $f->notes = $this->_('Example: template=MediaLibrary');
        $f->icon = 'tags';
        $f->attr('value', $field->get('filters'));
        $inputfields->append($f);

        $f = $modules->get('InputfieldInteger');
        $f->attr('name', 'thumnailwidth');
        $val = $field->get('thumnailwidth');
        if (!$val)
            $val = 260;
        $f->attr('value', (int) $val);
        $f->attr('size', 3);
        $f->label = $this->_('Thumbnail size');
        $f->description = $this->_('Pixels');
        $f->collapsed = Inputfield::collapsedBlank;
        $f->columnWidth = 50;
        $inputfields->append($f);

        $f = $modules->get('InputfieldRadios');
        $f->attr('name', 'thumnailsizer');
        $f->label = $this->_('Thumbnail size dimension');
        $f->description = $this->_('Select whether the "Thumbnail size" field represents the width or the height.');
        $f->addOption('width',  $this->_('Width'));
        $f->addOption('height', $this->_('Height'));
        $val = $field->get('thumnailsizer');
        if (!$val)
            $val = 'width';
        $f->attr('value', $val);
        $f->columnWidth = 50;
        $inputfields->append($f);

        return $inputfields;
    }

}
